<?xml version="1.0" encoding="utf-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:jee="http://www.springframework.org/schema/jee"
	xmlns:aop="http://www.springframework.org/schema/aop" xmlns:util="http://www.springframework.org/schema/util"
	xmlns:p="http://www.springframework.org/schema/p" xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:tool="http://www.springframework.org/schema/tool" xmlns:context="http://www.springframework.org/schema/context"
	xmlns:mvc="http://www.springframework.org/schema/mvc"
	xsi:schemaLocation="http://www.springframework.org/schema/beans 
	    http://www.springframework.org/schema/beans/spring-beans.xsd    
	    http://www.springframework.org/schema/tx    
	    http://www.springframework.org/schema/tx/spring-tx.xsd    
	    http://www.springframework.org/schema/aop    
	    http://www.springframework.org/schema/aop/spring-aop.xsd    
	    http://www.springframework.org/schema/context    
	    http://www.springframework.org/schema/context/spring-context.xsd   
	    http://www.springframework.org/schema/mvc                
	    http://www.springframework.org/schema/mvc/spring-mvc.xsd          
	    http://www.springframework.org/schema/jee            
	    http://www.springframework.org/schema/jee/spring-jee.xsd            
	    http://www.springframework.org/schema/util            
	    http://www.springframework.org/schema/util/spring-util.xsd            
	    http://www.springframework.org/schema/tool            
	    http://www.springframework.org/schema/tool/spring-tool.xsd">

	<!-- 引入属性文件 -->
	<context:property-placeholder location="classpath:/conf/jdbc.properties" />
	<!-- 添加对Annotation的支持 -->
	<context:annotation-config />
	
	<!-- 配置数据源 -->
	<!-- 数据库 -->
	<bean id="dataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource"
		destroy-method="close">
		<property name="driverClass">
			<value>${jdbc1.driverClassName}</value>
		</property>
		<property name="jdbcUrl">
			<value>${jdbc1.url}</value>
		</property>
		<property name="user">
			<value>${jdbc1.username}</value>
		</property>
		<property name="password">
			<value>${jdbc1.password}</value>
		</property>
		<!--连接池中保留的最小连接数。 -->
		<property name="minPoolSize">
			<value>5</value>
		</property>
		<!--连接池中保留的最大连接数。Default: 15 -->
		<property name="maxPoolSize">
			<value>30</value>
		</property>
		<!--初始化时获取的连接数，取值应在minPoolSize与maxPoolSize之间。Default: 3 -->
		<property name="initialPoolSize">
			<value>10</value>
		</property>
		<!--最大空闲时间,60秒内未使用则连接被丢弃。若为0则永不丢弃。Default: 0 -->
		<property name="maxIdleTime">
			<value>60</value>
		</property>
		<!--当连接池中的连接耗尽的时候c3p0一次同时获取的连接数。Default: 3 -->
		<property name="acquireIncrement">
			<value>5</value>
		</property>
		<!--JDBC的标准参数，用以控制数据源内加载的PreparedStatements数量。但由于预缓存的statements 属于单个connection而不是整个连接池。所以设置这个参数需要考虑到多方面的因素。 
			如果maxStatements与maxStatementsPerConnection均为0，则缓存被关闭。Default: 0 -->
		<property name="maxStatements">
			<value>0</value>
		</property>
		<!--每60秒检查所有连接池中的空闲连接。Default: 0 -->
		<property name="idleConnectionTestPeriod">
			<value>60</value>
		</property>
		<!--定义在从数据库获取新连接失败后重复尝试的次数。Default: 30 -->
		<property name="acquireRetryAttempts">
			<value>30</value>
		</property>
		<!-- Default: 1000 
          Milliseconds, time c3p0 will wait between acquire attempts.  -->
		<property name="acquireRetryDelay">
            <value>100</value>
        </property>
		<!--获取连接失败将会引起所有等待连接池来获取连接的线程抛出异常。但是数据源仍有效 保留，并在下次调用getConnection()的时候继续尝试获取连接。如果设为true，那么在尝试 
			获取连接失败后该数据源将申明已断开并永久关闭。Default: false -->
		<property name="breakAfterAcquireFailure">
			<value>false</value>
		</property>
		<!--因性能消耗大请只在需要的时候使用它。如果设为true那么在每个connection提交的 时候都将校验其有效性。建议使用idleConnectionTestPeriod或automaticTestTable 
			等方法来提升连接测试的性能。Default: false -->
		<property name="testConnectionOnCheckout">
			<value>false</value>
		</property>
	</bean>

	<!-- 配置Jdbc模板 -->
	<bean id="jdbcTemplate" class="org.springframework.jdbc.core.JdbcTemplate"
		p:dataSource-ref="dataSource"></bean>

	<!-- 配置事务管理器 -->
	<bean id="transactionManager"
		class="org.springframework.jdbc.datasource.DataSourceTransactionManager"
		p:dataSource-ref="dataSource" />

	<!--启动spring注解功能 -->
	<tx:annotation-driven transaction-manager="txManager" />
	<bean id="txManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
         <property name="dataSource" ref="dataSource"/>
    </bean>
	<!-- 通过AOP配置提供事务增强，让service包下所有Bean的所有方法拥有事务 -->
	<aop:config proxy-target-class="true">
		<aop:pointcut id="serviceMethod" expression=" execution(* mua.service..*(..))" />
		<aop:advisor pointcut-ref="serviceMethod" advice-ref="txAdvice" />
	</aop:config>
	<tx:advice id="txAdvice" transaction-manager="transactionManager">
		<tx:attributes>
			<tx:method name="*" />
		</tx:attributes>
	</tx:advice>

	<!-- 配置视图解析器，将ModelAndView及字符串解析为具体的页面 -->
	<bean
		class="org.springframework.web.servlet.view.InternalResourceViewResolver"
		p:viewClass="org.springframework.web.servlet.view.JstlView" 
		p:prefix="/WEB-INF/jsp/"
		p:suffix=".jsp" />

	<bean
		class="org.springframework.web.servlet.view.json.MappingJacksonJsonView"
		p:renderedAttributes="userList" />

	<bean
		class="org.springframework.web.servlet.mvc.annotation.AnnotationMethodHandlerAdapter">
		<property name="messageConverters">
			<list>
				<ref bean="stringHttpMessageConverter" />
				<ref bean="jsonHttpMessageConverter" />
				<!-- <ref bean="marshallingHttpMessageConverter" />   -->
			</list>
		</property>
	</bean>
	<!-- 返回值格式转换配置（String、Map） -->
	<bean id="stringHttpMessageConverter" class="org.springframework.http.converter.StringHttpMessageConverter" >
		<property name="supportedMediaTypes">
			<value>text/html;charset=UTF-8</value>
		</property>
	</bean>
	
	<bean id="jsonHttpMessageConverter"
		class="org.springframework.http.converter.json.MappingJacksonHttpMessageConverter">
		<property name="supportedMediaTypes">
			<list>
				<value>text/html;charset=UTF-8</value>
			</list>
		</property>

	</bean>
	
	<!-- 返回值格式转换配置，XML与PO转换 -->	
	<!-- <bean id="marshallingHttpMessageConverter" class="org.springframework.http.converter.xml.MarshallingHttpMessageConverter">
		<property name="marshaller" ref="castorMarshaller" />
		<property name="unmarshaller" ref="castorMarshaller" />
	</bean> 
	<bean id="castorMarshaller" class="org.springframework.oxm.castor.CastorMarshaller" /> -->
	
	<!-- 客户端远程调用配置 -->
	<!--  <bean id="springService" class="org.springframework.remoting.httpinvoker.HttpInvokerProxyFactoryBean" 
			p:serviceUrl="http://192.168.12.88:8080/IoT_Harbor/remoting/springService"
			p:serviceInterface="com.cetc.iot.servicesystem.service.SpringService" />  -->
			
	<!-- 上传拦截，如最大上传值及最小上传值 -->
	<bean id="multipartResolver"
		class="org.springframework.web.multipart.commons.CommonsMultipartResolver">
		<property name="maxUploadSize" value="100000000" /><!-- 100M -->
	</bean>
	
   <!-- <mvc:interceptors>
	<mvc:interceptor>
		<mvc:mapping path="/**" />
		<bean class="com.app.interceptor.SessionInterceptor">
			不需要session验证的地址
			<property name="excludeUrls">
				<list>
					
					<value>/registerView.html</value>
					<value>/registerUser.html</value>
					
				</list>
			</property>
		</bean>
	</mvc:interceptor>
	</mvc:interceptors>  -->
	
	<!-- mybaties配置 -->
	<!-- sqlSessinFactory -->
	<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<!-- 加载mybatis的配置文件 -->
		<property name="configLocation" value="classpath:conf/SqlMapConfig.xml" />
		<!-- 数据源 -->
		<property name="dataSource" ref="dataSource" />
	</bean>
	
	<!-- mapper批量扫描  -->
	<bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
		<!-- 指定扫描的包名 
		如果扫描多个包，每个包中间使用半角逗号分隔
		-->
		<property name="basePackage" value="com.mybaties.mapper"/>
		<property name="sqlSessionFactoryBeanName" value="sqlSessionFactory"/>
	</bean>
	
	
	<!-- 扫描类包，将标注Spring注解的类自动转化Bean，同时完成Bean的注入 -->
	<context:component-scan base-package="com.td" />
	
</beans>
